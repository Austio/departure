diff --git a/Gemfile.lock b/Gemfile.lock
index a10211f8..21a00e34 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -2,9 +2,9 @@ PATH
   remote: .
   specs:
     departure (6.7.0)
-      activerecord (>= 6.0.0, < 7.2.0, != 7.0.0)
+      activerecord (>= 6.0.0, < 7.3.0, != 7.0.0)
       mysql2 (>= 0.4.0, < 0.6.0)
-      railties (>= 6.0.0, < 7.2.0, != 7.0.0)
+      railties (>= 6.0.0, < 7.3.0, != 7.0.0)

 GEM
   remote: https://rubygems.org/
diff --git a/departure.gemspec b/departure.gemspec
index 68bea56a..b40fc89e 100644
--- a/departure.gemspec
+++ b/departure.gemspec
@@ -21,8 +21,8 @@ Gem::Specification.new do |spec|

   spec.required_ruby_version = '>= 2.7.0'

-  spec.add_runtime_dependency 'railties', '>= 6.0.0', '!= 7.0.0', '< 7.2.0'
-  spec.add_runtime_dependency 'activerecord', '>= 6.0.0', '!= 7.0.0', '< 7.2.0'
+  spec.add_runtime_dependency 'railties', '>= 6.0.0', '!= 7.0.0', '< 7.3.0'
+  spec.add_runtime_dependency 'activerecord', '>= 6.0.0', '!= 7.0.0', '< 7.3.0'
   spec.add_runtime_dependency 'mysql2', '>= 0.4.0', '< 0.6.0'

   spec.add_development_dependency 'appraisal', '~> 2.4.1'
diff --git a/lib/active_record/connection_adapters/percona_adapter.rb b/lib/active_record/connection_adapters/percona_adapter.rb
index 1eab221e..da3b1902 100644
--- a/lib/active_record/connection_adapters/percona_adapter.rb
+++ b/lib/active_record/connection_adapters/percona_adapter.rb
@@ -14,34 +14,43 @@ def percona_connection(config)
         config = config.dup if config.frozen?
         config[:username] = 'root'
       end
-      mysql2_connection = mysql2_connection(config)
-
-      connection_details = Departure::ConnectionDetails.new(config)
-      verbose = ActiveRecord::Migration.verbose
-      sanitizers = [
-        Departure::LogSanitizers::PasswordSanitizer.new(connection_details)
-      ]
-      percona_logger = Departure::LoggerFactory.build(sanitizers: sanitizers, verbose: verbose)
-      cli_generator = Departure::CliGenerator.new(connection_details)
-
-      runner = Departure::Runner.new(
-        percona_logger,
-        cli_generator,
-        mysql2_connection
-      )
-
-      connection_options = { mysql_adapter: mysql2_connection }
-
-      ConnectionAdapters::DepartureAdapter.new(
-        runner,
-        logger,
-        connection_options,
-        config
-      )
+
+      if ActiveRecord::VERSION::MAJOR >= 7 && ActiveRecord::VERSION::MINOR >= 2
+        ConnectionAdapters::DepartureAdapter.new(config)
+      else
+        mysql2_adapter = mysql2_connection(config)
+
+        connection_details = Departure::ConnectionDetails.new(config)
+        verbose = ActiveRecord::Migration.verbose
+        sanitizers = [
+          Departure::LogSanitizers::PasswordSanitizer.new(connection_details)
+        ]
+        percona_logger = Departure::LoggerFactory.build(sanitizers: sanitizers, verbose: verbose)
+        cli_generator = Departure::CliGenerator.new(connection_details)
+
+        runner = Departure::Runner.new(
+          percona_logger,
+          cli_generator,
+          mysql2_adapter
+        )
+
+        connection_options = { mysql_adapter: mysql2_adapter }
+
+        ConnectionAdapters::DepartureAdapter.new(
+          runner,
+          logger,
+          connection_options,
+          config
+        )
+      end
     end
   end

   module ConnectionAdapters
+    if ActiveRecord::VERSION::MAJOR >= 7 && ActiveRecord::VERSION::MINOR >= 2
+      register "percona", "ActiveRecord::ConnectionAdapters::DepartureAdapter", "active_record/connection_adapters/percona_adapter"
+    end
+
     class DepartureAdapter < AbstractMysqlAdapter
       TYPE_MAP = Type::TypeMap.new.tap { |m| initialize_type_map(m) } if defined?(initialize_type_map)

@@ -74,10 +83,48 @@ def visit_DropForeignKey(name) # rubocop:disable Style/MethodName

       def_delegators :mysql_adapter, :each_hash, :set_field_encoding

-      def initialize(connection, _logger, connection_options, _config)
-        @mysql_adapter = connection_options[:mysql_adapter]
-        super
-        @prepared_statements = false
+      if ActiveRecord::VERSION::MAJOR >= 7 && ActiveRecord::VERSION::MINOR >= 2
+        class << self
+          def new_client(config)
+            mysql2_adapter = ConnectionAdapters::Mysql2Adapter.new(config.merge(adapter: "mysql2"))
+
+            connection_details = Departure::ConnectionDetails.new(config)
+            verbose = ActiveRecord::Migration.verbose
+            sanitizers = [
+              Departure::LogSanitizers::PasswordSanitizer.new(connection_details)
+            ]
+            percona_logger = Departure::LoggerFactory.build(sanitizers: sanitizers, verbose: verbose)
+            cli_generator = Departure::CliGenerator.new(connection_details)
+
+            Departure::Runner.new(
+              percona_logger,
+              cli_generator,
+              mysql2_adapter
+            )
+          end
+        end
+
+        def initialize(...)
+          super
+
+          @mysql_adapter = ConnectionAdapters::Mysql2Adapter.new(@config.merge(adapter: "mysql2"))
+
+          @config[:flags] ||= 0
+
+          if @config[:flags].kind_of? Array
+            @config[:flags].push "FOUND_ROWS"
+          else
+            @config[:flags] |= ::Mysql2::Client::FOUND_ROWS
+          end
+
+          @connection_parameters ||= @config
+        end
+      else
+        def initialize(connection, logger, connection_options, config)
+          @mysql_adapter = connection_options[:mysql_adapter]
+          super
+          @prepared_statements = false
+        end
       end

       def write_query?(sql) # :nodoc:
@@ -181,6 +228,8 @@ def error_number(_exception); end
       def full_version
         if ActiveRecord::VERSION::MAJOR < 6
           get_full_version
+        elsif ActiveRecord::VERSION::MAJOR >= 7 && ActiveRecord::VERSION::MINOR >= 2
+          database_version.full_version_string
         else
           schema_cache.database_version.full_version_string
         end
@@ -200,21 +249,37 @@ def last_inserted_id(result)

       attr_reader :mysql_adapter

-      if ActiveRecord.version >= Gem::Version.create('7.1.0')
+      if ActiveRecord::VERSION::MAJOR >= 7 && ActiveRecord::VERSION::MINOR >= 1
         def raw_execute(sql, name, async: false, allow_retry: false, materialize_transactions: true)
-          log(sql, name, async: async) do
+          log(sql, name, async: async) do |notification_payload|
             with_raw_connection(allow_retry: allow_retry, materialize_transactions: materialize_transactions) do |conn|
               sync_timezone_changes(conn)
               result = conn.query(sql)
-              verified!
+              conn.abandon_results! if ActiveRecord::VERSION::MINOR >= 2
+              verified! if ActiveRecord.version >= Gem::Version.create('7.1.2')
               handle_warnings(sql)
+              notification_payload[:row_count] = result&.size || 0 if ActiveRecord::VERSION::MINOR >= 2
               result
             end
           end
         end
-      end

-      def reconnect; end
+        if ActiveRecord::VERSION::MINOR >= 2
+          def connect
+            @raw_connection = self.class.new_client(@connection_parameters)
+          rescue ConnectionNotEstablished => ex
+            raise ex.set_pool(@pool)
+          end
+
+          def reconnect
+            @raw_connection&.close
+            @raw_connection = nil
+            connect
+          end
+        else
+          def reconnect; end
+        end
+      end
     end
   end
 end
diff --git a/lib/departure.rb b/lib/departure.rb
index be85c674..2de6769e 100644
--- a/lib/departure.rb
+++ b/lib/departure.rb
@@ -2,6 +2,7 @@
 require 'active_support/all'

 require 'active_record/connection_adapters/for_alter'
+require 'active_record/connection_adapters/percona_adapter'

 require 'departure/version'
 require 'departure/log_sanitizers/password_sanitizer'
@@ -15,6 +16,7 @@
 require 'departure/command'
 require 'departure/connection_base'
 require 'departure/migration'
+require 'departure/migrator'

 require 'departure/railtie' if defined?(Rails)

@@ -25,6 +27,12 @@
   ActiveRecord::Migration.class_eval do
     include Departure::Migration
   end
+
+  if ActiveRecord::VERSION::MAJOR >= 7 && ActiveRecord::VERSION::MINOR >= 1
+    ActiveRecord::Migrator.class_eval do
+      include Departure::Migrator
+    end
+  end
 end

 module Departure
diff --git a/lib/departure/migrator.rb b/lib/departure/migrator.rb
new file mode 100644
index 00000000..34681f46
--- /dev/null
+++ b/lib/departure/migrator.rb
@@ -0,0 +1,36 @@
+module Departure
+  module Migrator
+    extend ActiveSupport::Concern
+
+    included do
+      private
+
+      def with_advisory_lock
+        lock_id = generate_migrator_advisory_lock_id
+
+        with_advisory_lock_connection do |connection|
+          got_lock = connection.get_advisory_lock(lock_id)
+          raise ConcurrentMigrationError unless got_lock
+          load_migrated # reload schema_migrations to be sure it wasn't changed by another process before we got the lock
+          yield
+        ensure
+          if got_lock && !connection.release_advisory_lock(lock_id)
+            raise ConcurrentMigrationError.new(
+              ConcurrentMigrationError::RELEASE_LOCK_FAILED_MESSAGE
+            )
+          end
+        end
+      end
+
+      def with_advisory_lock_connection(&block)
+        pool = ActiveRecord::ConnectionAdapters::ConnectionHandler.new.establish_connection(
+          ActiveRecord::Base.connection_db_config
+        )
+
+        pool.with_connection(&block)
+      ensure
+        pool&.disconnect!
+      end
+    end
+  end
+end
diff --git a/lib/departure/runner.rb b/lib/departure/runner.rb
index c6a25d09..2ca35ae9 100644
--- a/lib/departure/runner.rb
+++ b/lib/departure/runner.rb
@@ -26,6 +26,7 @@ def query(sql)
       if alter_statement?(sql)
         command_line = cli_generator.parse_statement(sql)
         execute(command_line)
+        affected_rows
       else
         mysql_adapter.execute(sql)
       end
@@ -39,6 +40,16 @@ def affected_rows
       mysql_adapter.raw_connection.affected_rows
     end

+    if ActiveRecord::VERSION::MAJOR >= 7 && ActiveRecord::VERSION::MINOR >= 2
+      def escape(str)
+        mysql_adapter.raw_connection.escape(str)
+      end
+
+      def abandon_results!
+        mysql_adapter.raw_connection.abandon_results!
+      end
+    end
+
     # TODO: rename it so we don't confuse it with AR's #execute
     # Runs and logs the given command
     #
